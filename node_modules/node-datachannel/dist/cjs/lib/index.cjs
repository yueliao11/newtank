'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var nodeDatachannel = require('./node-datachannel.cjs');
var datachannelStream = require('./datachannel-stream.cjs');
var websocketServer = require('./websocket-server.cjs');
var websocket = require('./websocket.cjs');

function preload() {
  nodeDatachannel.default.preload();
}
function initLogger(level) {
  nodeDatachannel.default.initLogger(level);
}
function cleanup() {
  nodeDatachannel.default.cleanup();
}
function setSctpSettings(settings) {
  nodeDatachannel.default.setSctpSettings(settings);
}
function getLibraryVersion() {
  return nodeDatachannel.default.getLibraryVersion();
}
const Audio = nodeDatachannel.default.Audio;
const Video = nodeDatachannel.default.Video;
const Track = nodeDatachannel.default.Track;
const DataChannel = nodeDatachannel.default.DataChannel;
const PeerConnection = nodeDatachannel.default.PeerConnection;
class RtcpReceivingSession {
  //
}
const DataChannelStream = datachannelStream.default;
var n = {
  initLogger,
  cleanup,
  preload,
  setSctpSettings,
  getLibraryVersion,
  RtcpReceivingSession,
  Track,
  Video,
  Audio,
  DataChannel,
  PeerConnection,
  WebSocket: websocket.WebSocket,
  WebSocketServer: websocketServer.WebSocketServer,
  DataChannelStream
};

exports.WebSocketServer = websocketServer.WebSocketServer;
exports.WebSocket = websocket.WebSocket;
exports.Audio = Audio;
exports.DataChannel = DataChannel;
exports.DataChannelStream = DataChannelStream;
exports.PeerConnection = PeerConnection;
exports.RtcpReceivingSession = RtcpReceivingSession;
exports.Track = Track;
exports.Video = Video;
exports.cleanup = cleanup;
exports.default = n;
exports.getLibraryVersion = getLibraryVersion;
exports.initLogger = initLogger;
exports.preload = preload;
exports.setSctpSettings = setSctpSettings;
//# sourceMappingURL=index.cjs.map
