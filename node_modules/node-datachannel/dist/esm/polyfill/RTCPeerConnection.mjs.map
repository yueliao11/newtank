{"version":3,"file":"RTCPeerConnection.mjs","sources":["../../../src/polyfill/RTCPeerConnection.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { SelectedCandidateInfo } from '../lib/types';\nimport { PeerConnection } from '../lib/index';\nimport RTCSessionDescription from './RTCSessionDescription';\nimport RTCDataChannel from './RTCDataChannel';\nimport RTCIceCandidate from './RTCIceCandidate';\nimport { RTCDataChannelEvent, RTCPeerConnectionIceEvent } from './Events';\nimport RTCSctpTransport from './RTCSctpTransport';\nimport * as exceptions from './Exception';\nimport RTCCertificate from './RTCCertificate';\n\n// extend RTCConfiguration with peerIdentity\ninterface RTCConfiguration extends globalThis.RTCConfiguration {\n    peerIdentity?: string;\n    peerConnection?: PeerConnection;\n}\n\nexport default class RTCPeerConnection extends EventTarget implements globalThis.RTCPeerConnection {\n    static async generateCertificate(): Promise<RTCCertificate> {\n        throw new DOMException('Not implemented');\n    }\n\n    #peerConnection: PeerConnection;\n    #localOffer: any;\n    #localAnswer: any;\n    #dataChannels: Set<RTCDataChannel>;\n    #dataChannelsClosed = 0;\n    #config: RTCConfiguration;\n    #canTrickleIceCandidates: boolean | null;\n    #sctp: RTCSctpTransport;\n\n    #localCandidates: RTCIceCandidate[] = [];\n    #remoteCandidates: RTCIceCandidate[] = [];\n\n    // events\n    onconnectionstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    ondatachannel: ((this: RTCPeerConnection, ev: RTCDataChannelEvent) => any) | null;\n    onicecandidate: ((this: RTCPeerConnection, ev: RTCPeerConnectionIceEvent) => any) | null;\n    onicecandidateerror: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    oniceconnectionstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    onicegatheringstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    onnegotiationneeded: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    onsignalingstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;\n    ontrack: ((this: RTCPeerConnection, ev: globalThis.RTCTrackEvent) => any) | null;\n\n    private _checkConfiguration(config: RTCConfiguration): void {\n        if (config && config.iceServers === undefined) config.iceServers = [];\n        if (config && config.iceTransportPolicy === undefined) config.iceTransportPolicy = 'all';\n\n        if (config?.iceServers === null) throw new TypeError('IceServers cannot be null');\n\n        // Check for all the properties of iceServers\n        if (Array.isArray(config?.iceServers)) {\n            for (let i = 0; i < config.iceServers.length; i++) {\n                if (config.iceServers[i] === null) throw new TypeError('IceServers cannot be null');\n                if (config.iceServers[i] === undefined) throw new TypeError('IceServers cannot be undefined');\n                if (Object.keys(config.iceServers[i]).length === 0) throw new TypeError('IceServers cannot be empty');\n\n                // If iceServers is string convert to array\n                if (typeof config.iceServers[i].urls === 'string')\n                    config.iceServers[i].urls = [config.iceServers[i].urls as string];\n\n                // urls can not be empty\n                if ((config.iceServers[i].urls as string[])?.some((url) => url == ''))\n                    throw new exceptions.SyntaxError('IceServers urls cannot be empty');\n\n                // urls should be valid URLs and match the protocols \"stun:|turn:|turns:\"\n                if (\n                    (config.iceServers[i].urls as string[])?.some(\n                        (url) => {\n                            try {\n                                const parsedURL = new URL(url)\n\n                                return !/^(stun:|turn:|turns:)$/.test(parsedURL.protocol)\n                            } catch (error) {\n                                return true\n                            }\n                        },\n                    )\n                )\n                    throw new exceptions.SyntaxError('IceServers urls wrong format');\n\n                // If this is a turn server check for username and credential\n                if ((config.iceServers[i].urls as string[])?.some((url) => url.startsWith('turn'))) {\n                    if (!config.iceServers[i].username)\n                        throw new exceptions.InvalidAccessError('IceServers username cannot be null');\n                    if (!config.iceServers[i].credential)\n                        throw new exceptions.InvalidAccessError('IceServers username cannot be undefined');\n                }\n\n                // length of urls can not be 0\n                if (config.iceServers[i].urls?.length === 0)\n                    throw new exceptions.SyntaxError('IceServers urls cannot be empty');\n            }\n        }\n\n        if (\n            config &&\n            config.iceTransportPolicy &&\n            config.iceTransportPolicy !== 'all' &&\n            config.iceTransportPolicy !== 'relay'\n        )\n            throw new TypeError('IceTransportPolicy must be either \"all\" or \"relay\"');\n    }\n\n    setConfiguration(config: RTCConfiguration): void {\n        this._checkConfiguration(config);\n        this.#config = config;\n    }\n\n\n\n    constructor(config: RTCConfiguration = { iceServers: [], iceTransportPolicy: 'all' }) {\n        super();\n\n        this._checkConfiguration(config);\n        this.#config = config;\n        this.#localOffer = createDeferredPromise();\n        this.#localAnswer = createDeferredPromise();\n        this.#dataChannels = new Set();\n        this.#canTrickleIceCandidates = null;\n\n        try {\n            const peerIdentity = (config as any)?.peerIdentity ?? `peer-${getRandomString(7)}`;\n            this.#peerConnection = config.peerConnection ?? new PeerConnection(peerIdentity,\n                {\n                    ...config,\n                    iceServers:\n                        config?.iceServers\n                            ?.map((server) => {\n                                const urls = Array.isArray(server.urls) ? server.urls : [server.urls];\n\n                                return urls.map((url) => {\n                                    if (server.username && server.credential) {\n                                        const [protocol, rest] = url.split(/:(.*)/);\n                                        return `${protocol}:${server.username}:${server.credential}@${rest}`;\n                                    }\n                                    return url;\n                                });\n                            })\n                            .flat() ?? [],\n                },\n            );\n        } catch (error) {\n            if (!error || !error.message) throw new exceptions.NotFoundError('Unknown error');\n            throw new exceptions.SyntaxError(error.message);\n        }\n\n        // forward peerConnection events\n        this.#peerConnection.onStateChange(() => {\n            this.dispatchEvent(new Event('connectionstatechange'));\n        });\n\n        this.#peerConnection.onIceStateChange(() => {\n            this.dispatchEvent(new Event('iceconnectionstatechange'));\n        });\n\n        this.#peerConnection.onSignalingStateChange(() => {\n            this.dispatchEvent(new Event('signalingstatechange'));\n        });\n\n        this.#peerConnection.onGatheringStateChange(() => {\n            this.dispatchEvent(new Event('icegatheringstatechange'));\n        });\n\n        this.#peerConnection.onDataChannel((channel) => {\n            const dc = new RTCDataChannel(channel);\n            this.#dataChannels.add(dc);\n            this.dispatchEvent(new RTCDataChannelEvent('datachannel', { channel: dc }));\n        });\n\n        this.#peerConnection.onLocalDescription((sdp, type) => {\n            if (type === 'offer') {\n                this.#localOffer.resolve({ sdp, type });\n            }\n\n            if (type === 'answer') {\n                this.#localAnswer.resolve({ sdp, type });\n            }\n        });\n\n        this.#peerConnection.onLocalCandidate((candidate, sdpMid) => {\n            if (sdpMid === 'unspec') {\n                this.#localAnswer.reject(new Error(`Invalid description type ${sdpMid}`));\n                return;\n            }\n\n            this.#localCandidates.push(new RTCIceCandidate({ candidate, sdpMid }));\n            this.dispatchEvent(new RTCPeerConnectionIceEvent(new RTCIceCandidate({ candidate, sdpMid })));\n        });\n\n        // forward events to properties\n        this.addEventListener('connectionstatechange', (e) => {\n            if (this.onconnectionstatechange) this.onconnectionstatechange(e);\n        });\n        this.addEventListener('signalingstatechange', (e) => {\n            if (this.onsignalingstatechange) this.onsignalingstatechange(e);\n        });\n        this.addEventListener('iceconnectionstatechange', (e) => {\n            if (this.oniceconnectionstatechange) this.oniceconnectionstatechange(e);\n        });\n        this.addEventListener('icegatheringstatechange', (e) => {\n            if (this.onicegatheringstatechange) this.onicegatheringstatechange(e);\n        });\n        this.addEventListener('datachannel', (e) => {\n            if (this.ondatachannel) this.ondatachannel(e as RTCDataChannelEvent);\n        });\n        this.addEventListener('icecandidate', (e) => {\n            if (this.onicecandidate) this.onicecandidate(e as RTCPeerConnectionIceEvent);\n        });\n\n        this.#sctp = new RTCSctpTransport({\n            pc: this,\n            extraFunctions: {\n                maxDataChannelId: (): number => {\n                    return this.#peerConnection.maxDataChannelId();\n                },\n                maxMessageSize: (): number => {\n                    return this.#peerConnection.maxMessageSize();\n                },\n                localCandidates: (): RTCIceCandidate[] => {\n                    return this.#localCandidates;\n                },\n                remoteCandidates: (): RTCIceCandidate[] => {\n                    return this.#remoteCandidates;\n                },\n                selectedCandidatePair: (): { local: SelectedCandidateInfo; remote: SelectedCandidateInfo } | null => {\n                    return this.#peerConnection.getSelectedCandidatePair();\n                },\n            },\n        });\n    }\n\n    get canTrickleIceCandidates(): boolean | null {\n        return this.#canTrickleIceCandidates;\n    }\n\n    get connectionState(): globalThis.RTCPeerConnectionState {\n        return this.#peerConnection.state();\n    }\n\n    get iceConnectionState(): globalThis.RTCIceConnectionState {\n        let state = this.#peerConnection.iceState();\n        // libdatachannel uses 'completed' instead of 'connected'\n        // see /webrtc/getstats.html\n        if (state == 'completed') state = 'connected';\n        return state;\n    }\n\n    get iceGatheringState(): globalThis.RTCIceGatheringState {\n        return this.#peerConnection.gatheringState();\n    }\n\n    get currentLocalDescription(): RTCSessionDescription {\n        return new RTCSessionDescription(this.#peerConnection.localDescription() as any);\n    }\n\n    get currentRemoteDescription(): RTCSessionDescription {\n        return new RTCSessionDescription(this.#peerConnection.remoteDescription() as any);\n    }\n\n    get localDescription(): RTCSessionDescription {\n        return new RTCSessionDescription(this.#peerConnection.localDescription() as any);\n    }\n\n    get pendingLocalDescription(): RTCSessionDescription {\n        return new RTCSessionDescription(this.#peerConnection.localDescription() as any);\n    }\n\n    get pendingRemoteDescription(): RTCSessionDescription {\n        return new RTCSessionDescription(this.#peerConnection.remoteDescription() as any);\n    }\n\n    get remoteDescription(): RTCSessionDescription {\n        return new RTCSessionDescription(this.#peerConnection.remoteDescription() as any);\n    }\n\n    get sctp(): RTCSctpTransport {\n        return this.#sctp;\n    }\n\n    get signalingState(): globalThis.RTCSignalingState {\n        return this.#peerConnection.signalingState();\n    }\n\n    async addIceCandidate(candidate?: globalThis.RTCIceCandidateInit | null): Promise<void> {\n        if (!candidate || !candidate.candidate) {\n            return;\n        }\n\n        if (candidate.sdpMid === null && candidate.sdpMLineIndex === null) {\n            throw new TypeError('sdpMid must be set');\n        }\n\n        if (candidate.sdpMid === undefined && candidate.sdpMLineIndex == undefined) {\n            throw new TypeError('sdpMid must be set');\n        }\n\n        // Reject if sdpMid format is not valid\n        // ??\n        if (candidate.sdpMid && candidate.sdpMid.length > 3) {\n            // console.log(candidate.sdpMid);\n            throw new exceptions.OperationError('Invalid sdpMid format');\n        }\n\n        // We don't care about sdpMLineIndex, just for test\n        if (!candidate.sdpMid && candidate.sdpMLineIndex > 1) {\n            throw new exceptions.OperationError('This is only for test case.');\n        }\n\n        try {\n            this.#peerConnection.addRemoteCandidate(candidate.candidate, candidate.sdpMid || '0');\n            this.#remoteCandidates.push(\n                new RTCIceCandidate({ candidate: candidate.candidate, sdpMid: candidate.sdpMid || '0' }),\n            );\n        } catch (error) {\n            if (!error || !error.message) throw new exceptions.NotFoundError('Unknown error');\n\n            // Check error Message if contains specific message\n            if (error.message.includes('remote candidate without remote description'))\n                throw new exceptions.InvalidStateError(error.message);\n            if (error.message.includes('Invalid candidate format')) throw new exceptions.OperationError(error.message);\n\n            throw new exceptions.NotFoundError(error.message);\n        }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addTrack(_track, ..._streams): globalThis.RTCRtpSender {\n        throw new DOMException('Not implemented');\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addTransceiver(_trackOrKind, _init): globalThis.RTCRtpTransceiver {\n        throw new DOMException('Not implemented');\n    }\n\n    close(): void {\n        // close all channels before shutting down\n        this.#dataChannels.forEach((channel) => {\n            channel.close();\n            this.#dataChannelsClosed++;\n        });\n\n        this.#peerConnection.close();\n    }\n\n    createAnswer(): Promise<globalThis.RTCSessionDescriptionInit | any> {\n        return this.#localAnswer;\n    }\n\n\n    createDataChannel(label, opts = {}): RTCDataChannel {\n        const channel = this.#peerConnection.createDataChannel(label, opts);\n        const dataChannel = new RTCDataChannel(channel, opts);\n\n        // ensure we can close all channels when shutting down\n        this.#dataChannels.add(dataChannel);\n        dataChannel.addEventListener('close', () => {\n            this.#dataChannels.delete(dataChannel);\n            this.#dataChannelsClosed++;\n        });\n\n        return dataChannel;\n    }\n\n    createOffer(): Promise<globalThis.RTCSessionDescriptionInit | any> {\n        return this.#localOffer;\n    }\n\n    getConfiguration(): globalThis.RTCConfiguration {\n        return this.#config;\n    }\n\n    getReceivers(): globalThis.RTCRtpReceiver[] {\n        throw new DOMException('Not implemented');\n    }\n\n    getSenders(): globalThis.RTCRtpSender[] {\n        throw new DOMException('Not implemented');\n    }\n\n    getStats(): Promise<globalThis.RTCStatsReport> {\n        return new Promise((resolve) => {\n            const report = new Map();\n            const cp = this.#peerConnection?.getSelectedCandidatePair();\n            const bytesSent = this.#peerConnection?.bytesSent();\n            const bytesReceived = this.#peerConnection?.bytesReceived();\n            const rtt = this.#peerConnection?.rtt();\n\n            if(!cp) {\n                return resolve(report);\n            }\n\n            const localIdRs = getRandomString(8);\n            const localId = 'RTCIceCandidate_' + localIdRs;\n            report.set(localId, {\n                id: localId,\n                type: 'local-candidate',\n                timestamp: Date.now(),\n                candidateType: cp.local.type,\n                ip: cp.local.address,\n                port: cp.local.port,\n            });\n\n            const remoteIdRs = getRandomString(8);\n            const remoteId = 'RTCIceCandidate_' + remoteIdRs;\n            report.set(remoteId, {\n                id: remoteId,\n                type: 'remote-candidate',\n                timestamp: Date.now(),\n                candidateType: cp.remote.type,\n                ip: cp.remote.address,\n                port: cp.remote.port,\n            });\n\n            const candidateId = 'RTCIceCandidatePair_' + localIdRs + '_' + remoteIdRs;\n            report.set(candidateId, {\n                id: candidateId,\n                type: 'candidate-pair',\n                timestamp: Date.now(),\n                localCandidateId: localId,\n                remoteCandidateId: remoteId,\n                state: 'succeeded',\n                nominated: true,\n                writable: true,\n                bytesSent: bytesSent,\n                bytesReceived: bytesReceived,\n                totalRoundTripTime: rtt,\n                currentRoundTripTime: rtt,\n            });\n\n            const transportId = 'RTCTransport_0_1';\n            report.set(transportId, {\n                id: transportId,\n                timestamp: Date.now(),\n                type: 'transport',\n                bytesSent: bytesSent,\n                bytesReceived: bytesReceived,\n                dtlsState: 'connected',\n                selectedCandidatePairId: candidateId,\n                selectedCandidatePairChanges: 1,\n            });\n\n            // peer-connection'\n            report.set('P', {\n                id: 'P',\n                type: 'peer-connection',\n                timestamp: Date.now(),\n                dataChannelsOpened: this.#dataChannels.size,\n                dataChannelsClosed: this.#dataChannelsClosed,\n            });\n\n            return resolve(report);\n        });\n    }\n\n    getTransceivers(): globalThis.RTCRtpTransceiver[] {\n        return []; // throw new DOMException('Not implemented');\n    }\n\n    removeTrack(): void {\n        throw new DOMException('Not implemented');\n    }\n\n    restartIce(): Promise<void> {\n        throw new DOMException('Not implemented');\n    }\n\n    async setLocalDescription(description: globalThis.RTCSessionDescriptionInit): Promise<void> {\n        if (description?.type !== 'offer') {\n            // any other type causes libdatachannel to throw\n            return;\n        }\n\n        this.#peerConnection.setLocalDescription(description?.type as any);\n    }\n\n    async setRemoteDescription(description: globalThis.RTCSessionDescriptionInit): Promise<void> {\n        if (description.sdp == null) {\n            throw new DOMException('Remote SDP must be set');\n        }\n\n        this.#peerConnection.setRemoteDescription(description.sdp, description.type as any);\n    }\n}\n\nfunction createDeferredPromise(): any {\n    let resolve: any, reject: any;\n\n    const promise = new Promise(function (_resolve, _reject) {\n        resolve = _resolve;\n        reject = _reject;\n    });\n\n    (promise as any).resolve = resolve;\n    (promise as any).reject = reject;\n    return promise;\n}\n\nfunction getRandomString(length): string {\n    return Math.random()\n        .toString(36)\n        .substring(2, 2 + length);\n}\n"],"names":["exceptions.NotFoundError","exceptions.SyntaxError","exceptions.InvalidAccessError","exceptions.OperationError","exceptions.InvalidStateError"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,eAAA,EAAA,WAAA,EAAA,YAAA,EAAA,aAAA,EAAA,mBAAA,EAAA,OAAA,EAAA,wBAAA,EAAA,KAAA,EAAA,gBAAA,EAAA,iBAAA,CAAA;AAiBA,MAAqB,0BAA0B,WAAoD,CAAA;AAAA,EA+F/F,WAAA,CAAY,SAA2B,EAAE,UAAA,EAAY,EAAI,EAAA,kBAAA,EAAoB,OAAS,EAAA;AAClF,IAAM,KAAA,EAAA,CAAA;AA3FV,IAAA,YAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAA;AACA,IAAA,YAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;AACA,IAAA,YAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;AACA,IAAA,YAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;AACA,IAAsB,YAAA,CAAA,IAAA,EAAA,mBAAA,EAAA,CAAA,CAAA,CAAA;AACtB,IAAA,YAAA,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;AACA,IAAA,YAAA,CAAA,IAAA,EAAA,wBAAA,CAAA,CAAA;AACA,IAAA,YAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AAEA,IAAA,YAAA,CAAA,IAAA,EAAA,gBAAA,EAAsC,EAAC,CAAA,CAAA;AACvC,IAAA,YAAA,CAAA,IAAA,EAAA,iBAAA,EAAuC,EAAC,CAAA,CAAA;AAGxC;AAAA,IAAA,aAAA,CAAA,IAAA,EAAA,yBAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,gBAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,qBAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,4BAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,2BAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,qBAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,wBAAA,CAAA,CAAA;AACA,IAAA,aAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AAwEI,IAAA,IAAA,CAAK,oBAAoB,MAAM,CAAA,CAAA;AAC/B,IAAA,YAAA,CAAA,IAAA,EAAK,OAAU,EAAA,MAAA,CAAA,CAAA;AACf,IAAA,YAAA,CAAA,IAAA,EAAK,aAAc,qBAAsB,EAAA,CAAA,CAAA;AACzC,IAAA,YAAA,CAAA,IAAA,EAAK,cAAe,qBAAsB,EAAA,CAAA,CAAA;AAC1C,IAAK,YAAA,CAAA,IAAA,EAAA,aAAA,sBAAoB,GAAI,EAAA,CAAA,CAAA;AAC7B,IAAA,YAAA,CAAA,IAAA,EAAK,wBAA2B,EAAA,IAAA,CAAA,CAAA;AAEhC,IAAI,IAAA;AACA,MAAA,MAAM,eAAgB,MAAgB,EAAA,YAAA,IAAgB,CAAQ,KAAA,EAAA,eAAA,CAAgB,CAAC,CAAC,CAAA,CAAA,CAAA;AAChF,MAAK,YAAA,CAAA,IAAA,EAAA,eAAA,EAAkB,MAAO,CAAA,cAAA,IAAkB,IAAI,cAAA;AAAA,QAAe,YAAA;AAAA,QAC/D;AAAA,UACI,GAAG,MAAA;AAAA,UACH,UACI,EAAA,MAAA,EAAQ,UACF,EAAA,GAAA,CAAI,CAAC,MAAW,KAAA;AACd,YAAM,MAAA,IAAA,GAAO,KAAM,CAAA,OAAA,CAAQ,MAAO,CAAA,IAAI,IAAI,MAAO,CAAA,IAAA,GAAO,CAAC,MAAA,CAAO,IAAI,CAAA,CAAA;AAEpE,YAAO,OAAA,IAAA,CAAK,GAAI,CAAA,CAAC,GAAQ,KAAA;AACrB,cAAI,IAAA,MAAA,CAAO,QAAY,IAAA,MAAA,CAAO,UAAY,EAAA;AACtC,gBAAA,MAAM,CAAC,QAAU,EAAA,IAAI,CAAI,GAAA,GAAA,CAAI,MAAM,OAAO,CAAA,CAAA;AAC1C,gBAAO,OAAA,CAAA,EAAG,QAAQ,CAAI,CAAA,EAAA,MAAA,CAAO,QAAQ,CAAI,CAAA,EAAA,MAAA,CAAO,UAAU,CAAA,CAAA,EAAI,IAAI,CAAA,CAAA,CAAA;AAAA,eACtE;AACA,cAAO,OAAA,GAAA,CAAA;AAAA,aACV,CAAA,CAAA;AAAA,WACJ,CAAA,CACA,IAAK,EAAA,IAAK,EAAC;AAAA,SACxB;AAAA,OACJ,CAAA,CAAA;AAAA,aACK,KAAO,EAAA;AACZ,MAAI,IAAA,CAAC,SAAS,CAAC,KAAA,CAAM,SAAe,MAAA,IAAIA,aAAW,CAAc,eAAe,CAAA,CAAA;AAChF,MAAA,MAAM,IAAIC,WAAuB,CAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AAAA,KAClD;AAGA,IAAK,YAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,cAAc,MAAM;AACrC,MAAA,IAAA,CAAK,aAAc,CAAA,IAAI,KAAM,CAAA,uBAAuB,CAAC,CAAA,CAAA;AAAA,KACxD,CAAA,CAAA;AAED,IAAK,YAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,iBAAiB,MAAM;AACxC,MAAA,IAAA,CAAK,aAAc,CAAA,IAAI,KAAM,CAAA,0BAA0B,CAAC,CAAA,CAAA;AAAA,KAC3D,CAAA,CAAA;AAED,IAAK,YAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,uBAAuB,MAAM;AAC9C,MAAA,IAAA,CAAK,aAAc,CAAA,IAAI,KAAM,CAAA,sBAAsB,CAAC,CAAA,CAAA;AAAA,KACvD,CAAA,CAAA;AAED,IAAK,YAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,uBAAuB,MAAM;AAC9C,MAAA,IAAA,CAAK,aAAc,CAAA,IAAI,KAAM,CAAA,yBAAyB,CAAC,CAAA,CAAA;AAAA,KAC1D,CAAA,CAAA;AAED,IAAK,YAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,aAAc,CAAA,CAAC,OAAY,KAAA;AAC5C,MAAM,MAAA,EAAA,GAAK,IAAI,cAAA,CAAe,OAAO,CAAA,CAAA;AACrC,MAAK,YAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAc,IAAI,EAAE,CAAA,CAAA;AACzB,MAAK,IAAA,CAAA,aAAA,CAAc,IAAI,mBAAoB,CAAA,aAAA,EAAe,EAAE,OAAS,EAAA,EAAA,EAAI,CAAC,CAAA,CAAA;AAAA,KAC7E,CAAA,CAAA;AAED,IAAA,YAAA,CAAA,IAAA,EAAK,eAAgB,CAAA,CAAA,kBAAA,CAAmB,CAAC,GAAA,EAAK,IAAS,KAAA;AACnD,MAAA,IAAI,SAAS,OAAS,EAAA;AAClB,QAAA,YAAA,CAAA,IAAA,EAAK,WAAY,CAAA,CAAA,OAAA,CAAQ,EAAE,GAAA,EAAK,MAAM,CAAA,CAAA;AAAA,OAC1C;AAEA,MAAA,IAAI,SAAS,QAAU,EAAA;AACnB,QAAA,YAAA,CAAA,IAAA,EAAK,YAAa,CAAA,CAAA,OAAA,CAAQ,EAAE,GAAA,EAAK,MAAM,CAAA,CAAA;AAAA,OAC3C;AAAA,KACH,CAAA,CAAA;AAED,IAAA,YAAA,CAAA,IAAA,EAAK,eAAgB,CAAA,CAAA,gBAAA,CAAiB,CAAC,SAAA,EAAW,MAAW,KAAA;AACzD,MAAA,IAAI,WAAW,QAAU,EAAA;AACrB,QAAA,YAAA,CAAA,IAAA,EAAK,cAAa,MAAO,CAAA,IAAI,MAAM,CAA4B,yBAAA,EAAA,MAAM,EAAE,CAAC,CAAA,CAAA;AACxE,QAAA,OAAA;AAAA,OACJ;AAEA,MAAK,YAAA,CAAA,IAAA,EAAA,gBAAA,CAAA,CAAiB,KAAK,IAAI,eAAA,CAAgB,EAAE,SAAW,EAAA,MAAA,EAAQ,CAAC,CAAA,CAAA;AACrE,MAAK,IAAA,CAAA,aAAA,CAAc,IAAI,yBAAA,CAA0B,IAAI,eAAA,CAAgB,EAAE,SAAW,EAAA,MAAA,EAAQ,CAAC,CAAC,CAAA,CAAA;AAAA,KAC/F,CAAA,CAAA;AAGD,IAAK,IAAA,CAAA,gBAAA,CAAiB,uBAAyB,EAAA,CAAC,CAAM,KAAA;AAClD,MAAA,IAAI,IAAK,CAAA,uBAAA,EAA8B,IAAA,CAAA,uBAAA,CAAwB,CAAC,CAAA,CAAA;AAAA,KACnE,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,gBAAA,CAAiB,sBAAwB,EAAA,CAAC,CAAM,KAAA;AACjD,MAAA,IAAI,IAAK,CAAA,sBAAA,EAA6B,IAAA,CAAA,sBAAA,CAAuB,CAAC,CAAA,CAAA;AAAA,KACjE,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,gBAAA,CAAiB,0BAA4B,EAAA,CAAC,CAAM,KAAA;AACrD,MAAA,IAAI,IAAK,CAAA,0BAAA,EAAiC,IAAA,CAAA,0BAAA,CAA2B,CAAC,CAAA,CAAA;AAAA,KACzE,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,gBAAA,CAAiB,yBAA2B,EAAA,CAAC,CAAM,KAAA;AACpD,MAAA,IAAI,IAAK,CAAA,yBAAA,EAAgC,IAAA,CAAA,yBAAA,CAA0B,CAAC,CAAA,CAAA;AAAA,KACvE,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,gBAAA,CAAiB,aAAe,EAAA,CAAC,CAAM,KAAA;AACxC,MAAA,IAAI,IAAK,CAAA,aAAA,EAAoB,IAAA,CAAA,aAAA,CAAc,CAAwB,CAAA,CAAA;AAAA,KACtE,CAAA,CAAA;AACD,IAAK,IAAA,CAAA,gBAAA,CAAiB,cAAgB,EAAA,CAAC,CAAM,KAAA;AACzC,MAAA,IAAI,IAAK,CAAA,cAAA,EAAqB,IAAA,CAAA,cAAA,CAAe,CAA8B,CAAA,CAAA;AAAA,KAC9E,CAAA,CAAA;AAED,IAAK,YAAA,CAAA,IAAA,EAAA,KAAA,EAAQ,IAAI,gBAAiB,CAAA;AAAA,MAC9B,EAAI,EAAA,IAAA;AAAA,MACJ,cAAgB,EAAA;AAAA,QACZ,kBAAkB,MAAc;AAC5B,UAAO,OAAA,YAAA,CAAA,IAAA,EAAK,iBAAgB,gBAAiB,EAAA,CAAA;AAAA,SACjD;AAAA,QACA,gBAAgB,MAAc;AAC1B,UAAO,OAAA,YAAA,CAAA,IAAA,EAAK,iBAAgB,cAAe,EAAA,CAAA;AAAA,SAC/C;AAAA,QACA,iBAAiB,MAAyB;AACtC,UAAA,OAAO,YAAK,CAAA,IAAA,EAAA,gBAAA,CAAA,CAAA;AAAA,SAChB;AAAA,QACA,kBAAkB,MAAyB;AACvC,UAAA,OAAO,YAAK,CAAA,IAAA,EAAA,iBAAA,CAAA,CAAA;AAAA,SAChB;AAAA,QACA,uBAAuB,MAA8E;AACjG,UAAO,OAAA,YAAA,CAAA,IAAA,EAAK,iBAAgB,wBAAyB,EAAA,CAAA;AAAA,SACzD;AAAA,OACJ;AAAA,KACH,CAAA,CAAA,CAAA;AAAA,GACL;AAAA,EArNA,aAAa,mBAA+C,GAAA;AACxD,IAAM,MAAA,IAAI,aAAa,iBAAiB,CAAA,CAAA;AAAA,GAC5C;AAAA,EAyBQ,oBAAoB,MAAgC,EAAA;AACxD,IAAA,IAAI,UAAU,MAAO,CAAA,UAAA,KAAe,KAAW,CAAA,EAAA,MAAA,CAAO,aAAa,EAAC,CAAA;AACpE,IAAA,IAAI,MAAU,IAAA,MAAA,CAAO,kBAAuB,KAAA,KAAA,CAAA,SAAkB,kBAAqB,GAAA,KAAA,CAAA;AAEnF,IAAA,IAAI,QAAQ,UAAe,KAAA,IAAA,EAAY,MAAA,IAAI,UAAU,2BAA2B,CAAA,CAAA;AAGhF,IAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,MAAQ,EAAA,UAAU,CAAG,EAAA;AACnC,MAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,MAAO,CAAA,UAAA,CAAW,QAAQ,CAAK,EAAA,EAAA;AAC/C,QAAI,IAAA,MAAA,CAAO,WAAW,CAAC,CAAA,KAAM,MAAY,MAAA,IAAI,UAAU,2BAA2B,CAAA,CAAA;AAClF,QAAI,IAAA,MAAA,CAAO,WAAW,CAAC,CAAA,KAAM,QAAiB,MAAA,IAAI,UAAU,gCAAgC,CAAA,CAAA;AAC5F,QAAA,IAAI,MAAO,CAAA,IAAA,CAAK,MAAO,CAAA,UAAA,CAAW,CAAC,CAAC,CAAE,CAAA,MAAA,KAAW,CAAG,EAAA,MAAM,IAAI,SAAA,CAAU,4BAA4B,CAAA,CAAA;AAGpG,QAAA,IAAI,OAAO,MAAA,CAAO,UAAW,CAAA,CAAC,EAAE,IAAS,KAAA,QAAA;AACrC,UAAO,MAAA,CAAA,UAAA,CAAW,CAAC,CAAE,CAAA,IAAA,GAAO,CAAC,MAAO,CAAA,UAAA,CAAW,CAAC,CAAA,CAAE,IAAc,CAAA,CAAA;AAGpE,QAAK,IAAA,MAAA,CAAO,WAAW,CAAC,CAAA,CAAE,MAAmB,IAAK,CAAA,CAAC,GAAQ,KAAA,GAAA,IAAO,EAAE,CAAA;AAChE,UAAM,MAAA,IAAIA,WAAW,CAAY,iCAAiC,CAAA,CAAA;AAGtE,QAAA,IACK,MAAO,CAAA,UAAA,CAAW,CAAC,CAAA,CAAE,IAAmB,EAAA,IAAA;AAAA,UACrC,CAAC,GAAQ,KAAA;AACL,YAAI,IAAA;AACA,cAAM,MAAA,SAAA,GAAY,IAAI,GAAA,CAAI,GAAG,CAAA,CAAA;AAE7B,cAAA,OAAO,CAAC,wBAAA,CAAyB,IAAK,CAAA,SAAA,CAAU,QAAQ,CAAA,CAAA;AAAA,qBACnD,KAAO,EAAA;AACZ,cAAO,OAAA,IAAA,CAAA;AAAA,aACX;AAAA,WACJ;AAAA,SACJ;AAEA,UAAM,MAAA,IAAIA,WAAW,CAAY,8BAA8B,CAAA,CAAA;AAGnE,QAAA,IAAK,MAAO,CAAA,UAAA,CAAW,CAAC,CAAA,CAAE,IAAmB,EAAA,IAAA,CAAK,CAAC,GAAA,KAAQ,GAAI,CAAA,UAAA,CAAW,MAAM,CAAC,CAAG,EAAA;AAChF,UAAA,IAAI,CAAC,MAAA,CAAO,UAAW,CAAA,CAAC,CAAE,CAAA,QAAA;AACtB,YAAM,MAAA,IAAIC,kBAAW,CAAmB,oCAAoC,CAAA,CAAA;AAChF,UAAA,IAAI,CAAC,MAAA,CAAO,UAAW,CAAA,CAAC,CAAE,CAAA,UAAA;AACtB,YAAM,MAAA,IAAIA,kBAAW,CAAmB,yCAAyC,CAAA,CAAA;AAAA,SACzF;AAGA,QAAA,IAAI,MAAO,CAAA,UAAA,CAAW,CAAC,CAAA,CAAE,MAAM,MAAW,KAAA,CAAA;AACtC,UAAM,MAAA,IAAID,WAAW,CAAY,iCAAiC,CAAA,CAAA;AAAA,OAC1E;AAAA,KACJ;AAEA,IAAA,IACI,UACA,MAAO,CAAA,kBAAA,IACP,OAAO,kBAAuB,KAAA,KAAA,IAC9B,OAAO,kBAAuB,KAAA,OAAA;AAE9B,MAAM,MAAA,IAAI,UAAU,oDAAoD,CAAA,CAAA;AAAA,GAChF;AAAA,EAEA,iBAAiB,MAAgC,EAAA;AAC7C,IAAA,IAAA,CAAK,oBAAoB,MAAM,CAAA,CAAA;AAC/B,IAAA,YAAA,CAAA,IAAA,EAAK,OAAU,EAAA,MAAA,CAAA,CAAA;AAAA,GACnB;AAAA,EA6HA,IAAI,uBAA0C,GAAA;AAC1C,IAAA,OAAO,YAAK,CAAA,IAAA,EAAA,wBAAA,CAAA,CAAA;AAAA,GAChB;AAAA,EAEA,IAAI,eAAqD,GAAA;AACrD,IAAO,OAAA,YAAA,CAAA,IAAA,EAAK,iBAAgB,KAAM,EAAA,CAAA;AAAA,GACtC;AAAA,EAEA,IAAI,kBAAuD,GAAA;AACvD,IAAI,IAAA,KAAA,GAAQ,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,QAAS,EAAA,CAAA;AAG1C,IAAI,IAAA,KAAA,IAAS,aAAqB,KAAA,GAAA,WAAA,CAAA;AAClC,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EAEA,IAAI,iBAAqD,GAAA;AACrD,IAAO,OAAA,YAAA,CAAA,IAAA,EAAK,iBAAgB,cAAe,EAAA,CAAA;AAAA,GAC/C;AAAA,EAEA,IAAI,uBAAiD,GAAA;AACjD,IAAA,OAAO,IAAI,qBAAA,CAAsB,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,kBAAyB,CAAA,CAAA;AAAA,GACnF;AAAA,EAEA,IAAI,wBAAkD,GAAA;AAClD,IAAA,OAAO,IAAI,qBAAA,CAAsB,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,mBAA0B,CAAA,CAAA;AAAA,GACpF;AAAA,EAEA,IAAI,gBAA0C,GAAA;AAC1C,IAAA,OAAO,IAAI,qBAAA,CAAsB,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,kBAAyB,CAAA,CAAA;AAAA,GACnF;AAAA,EAEA,IAAI,uBAAiD,GAAA;AACjD,IAAA,OAAO,IAAI,qBAAA,CAAsB,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,kBAAyB,CAAA,CAAA;AAAA,GACnF;AAAA,EAEA,IAAI,wBAAkD,GAAA;AAClD,IAAA,OAAO,IAAI,qBAAA,CAAsB,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,mBAA0B,CAAA,CAAA;AAAA,GACpF;AAAA,EAEA,IAAI,iBAA2C,GAAA;AAC3C,IAAA,OAAO,IAAI,qBAAA,CAAsB,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,mBAA0B,CAAA,CAAA;AAAA,GACpF;AAAA,EAEA,IAAI,IAAyB,GAAA;AACzB,IAAA,OAAO,YAAK,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AAAA,GAChB;AAAA,EAEA,IAAI,cAA+C,GAAA;AAC/C,IAAO,OAAA,YAAA,CAAA,IAAA,EAAK,iBAAgB,cAAe,EAAA,CAAA;AAAA,GAC/C;AAAA,EAEA,MAAM,gBAAgB,SAAkE,EAAA;AACpF,IAAA,IAAI,CAAC,SAAA,IAAa,CAAC,SAAA,CAAU,SAAW,EAAA;AACpC,MAAA,OAAA;AAAA,KACJ;AAEA,IAAA,IAAI,SAAU,CAAA,MAAA,KAAW,IAAQ,IAAA,SAAA,CAAU,kBAAkB,IAAM,EAAA;AAC/D,MAAM,MAAA,IAAI,UAAU,oBAAoB,CAAA,CAAA;AAAA,KAC5C;AAEA,IAAA,IAAI,SAAU,CAAA,MAAA,KAAW,KAAa,CAAA,IAAA,SAAA,CAAU,iBAAiB,KAAW,CAAA,EAAA;AACxE,MAAM,MAAA,IAAI,UAAU,oBAAoB,CAAA,CAAA;AAAA,KAC5C;AAIA,IAAA,IAAI,SAAU,CAAA,MAAA,IAAU,SAAU,CAAA,MAAA,CAAO,SAAS,CAAG,EAAA;AAEjD,MAAM,MAAA,IAAIE,cAAW,CAAe,uBAAuB,CAAA,CAAA;AAAA,KAC/D;AAGA,IAAA,IAAI,CAAC,SAAA,CAAU,MAAU,IAAA,SAAA,CAAU,gBAAgB,CAAG,EAAA;AAClD,MAAM,MAAA,IAAIA,cAAW,CAAe,6BAA6B,CAAA,CAAA;AAAA,KACrE;AAEA,IAAI,IAAA;AACA,MAAA,YAAA,CAAA,IAAA,EAAK,iBAAgB,kBAAmB,CAAA,SAAA,CAAU,SAAW,EAAA,SAAA,CAAU,UAAU,GAAG,CAAA,CAAA;AACpF,MAAA,YAAA,CAAA,IAAA,EAAK,iBAAkB,CAAA,CAAA,IAAA;AAAA,QACnB,IAAI,eAAgB,CAAA,EAAE,SAAW,EAAA,SAAA,CAAU,WAAW,MAAQ,EAAA,SAAA,CAAU,MAAU,IAAA,GAAA,EAAK,CAAA;AAAA,OAC3F,CAAA;AAAA,aACK,KAAO,EAAA;AACZ,MAAI,IAAA,CAAC,SAAS,CAAC,KAAA,CAAM,SAAe,MAAA,IAAIH,aAAW,CAAc,eAAe,CAAA,CAAA;AAGhF,MAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,QAAA,CAAS,6CAA6C,CAAA;AACpE,QAAA,MAAM,IAAII,iBAA6B,CAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AACxD,MAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,QAAA,CAAS,0BAA0B,CAAA,QAAS,IAAID,cAA0B,CAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AAEzG,MAAA,MAAM,IAAIH,aAAyB,CAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AAAA,KACpD;AAAA,GACJ;AAAA;AAAA,EAGA,QAAA,CAAS,WAAW,QAAmC,EAAA;AACnD,IAAM,MAAA,IAAI,aAAa,iBAAiB,CAAA,CAAA;AAAA,GAC5C;AAAA;AAAA,EAGA,cAAA,CAAe,cAAc,KAAqC,EAAA;AAC9D,IAAM,MAAA,IAAI,aAAa,iBAAiB,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEA,KAAc,GAAA;AAEV,IAAK,YAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAc,OAAQ,CAAA,CAAC,OAAY,KAAA;AACpC,MAAA,OAAA,CAAQ,KAAM,EAAA,CAAA;AACd,MAAA,gBAAA,CAAA,IAAA,EAAK,mBAAL,CAAA,CAAA,CAAA,EAAA,CAAA;AAAA,KACH,CAAA,CAAA;AAED,IAAA,YAAA,CAAA,IAAA,EAAK,iBAAgB,KAAM,EAAA,CAAA;AAAA,GAC/B;AAAA,EAEA,YAAoE,GAAA;AAChE,IAAA,OAAO,YAAK,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;AAAA,GAChB;AAAA,EAGA,iBAAkB,CAAA,KAAA,EAAO,IAAO,GAAA,EAAoB,EAAA;AAChD,IAAA,MAAM,OAAU,GAAA,YAAA,CAAA,IAAA,EAAK,eAAgB,CAAA,CAAA,iBAAA,CAAkB,OAAO,IAAI,CAAA,CAAA;AAClE,IAAA,MAAM,WAAc,GAAA,IAAI,cAAe,CAAA,OAAA,EAAS,IAAI,CAAA,CAAA;AAGpD,IAAK,YAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAc,IAAI,WAAW,CAAA,CAAA;AAClC,IAAY,WAAA,CAAA,gBAAA,CAAiB,SAAS,MAAM;AACxC,MAAK,YAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAc,OAAO,WAAW,CAAA,CAAA;AACrC,MAAA,gBAAA,CAAA,IAAA,EAAK,mBAAL,CAAA,CAAA,CAAA,EAAA,CAAA;AAAA,KACH,CAAA,CAAA;AAED,IAAO,OAAA,WAAA,CAAA;AAAA,GACX;AAAA,EAEA,WAAmE,GAAA;AAC/D,IAAA,OAAO,YAAK,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;AAAA,GAChB;AAAA,EAEA,gBAAgD,GAAA;AAC5C,IAAA,OAAO,YAAK,CAAA,IAAA,EAAA,OAAA,CAAA,CAAA;AAAA,GAChB;AAAA,EAEA,YAA4C,GAAA;AACxC,IAAM,MAAA,IAAI,aAAa,iBAAiB,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEA,UAAwC,GAAA;AACpC,IAAM,MAAA,IAAI,aAAa,iBAAiB,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEA,QAA+C,GAAA;AAC3C,IAAO,OAAA,IAAI,OAAQ,CAAA,CAAC,OAAY,KAAA;AAC5B,MAAM,MAAA,MAAA,uBAAa,GAAI,EAAA,CAAA;AACvB,MAAM,MAAA,EAAA,GAAK,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,EAAiB,wBAAyB,EAAA,CAAA;AAC1D,MAAM,MAAA,SAAA,GAAY,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,EAAiB,SAAU,EAAA,CAAA;AAClD,MAAM,MAAA,aAAA,GAAgB,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,EAAiB,aAAc,EAAA,CAAA;AAC1D,MAAM,MAAA,GAAA,GAAM,YAAK,CAAA,IAAA,EAAA,eAAA,CAAA,EAAiB,GAAI,EAAA,CAAA;AAEtC,MAAA,IAAG,CAAC,EAAI,EAAA;AACJ,QAAA,OAAO,QAAQ,MAAM,CAAA,CAAA;AAAA,OACzB;AAEA,MAAM,MAAA,SAAA,GAAY,gBAAgB,CAAC,CAAA,CAAA;AACnC,MAAA,MAAM,UAAU,kBAAqB,GAAA,SAAA,CAAA;AACrC,MAAA,MAAA,CAAO,IAAI,OAAS,EAAA;AAAA,QAChB,EAAI,EAAA,OAAA;AAAA,QACJ,IAAM,EAAA,iBAAA;AAAA,QACN,SAAA,EAAW,KAAK,GAAI,EAAA;AAAA,QACpB,aAAA,EAAe,GAAG,KAAM,CAAA,IAAA;AAAA,QACxB,EAAA,EAAI,GAAG,KAAM,CAAA,OAAA;AAAA,QACb,IAAA,EAAM,GAAG,KAAM,CAAA,IAAA;AAAA,OAClB,CAAA,CAAA;AAED,MAAM,MAAA,UAAA,GAAa,gBAAgB,CAAC,CAAA,CAAA;AACpC,MAAA,MAAM,WAAW,kBAAqB,GAAA,UAAA,CAAA;AACtC,MAAA,MAAA,CAAO,IAAI,QAAU,EAAA;AAAA,QACjB,EAAI,EAAA,QAAA;AAAA,QACJ,IAAM,EAAA,kBAAA;AAAA,QACN,SAAA,EAAW,KAAK,GAAI,EAAA;AAAA,QACpB,aAAA,EAAe,GAAG,MAAO,CAAA,IAAA;AAAA,QACzB,EAAA,EAAI,GAAG,MAAO,CAAA,OAAA;AAAA,QACd,IAAA,EAAM,GAAG,MAAO,CAAA,IAAA;AAAA,OACnB,CAAA,CAAA;AAED,MAAM,MAAA,WAAA,GAAc,sBAAyB,GAAA,SAAA,GAAY,GAAM,GAAA,UAAA,CAAA;AAC/D,MAAA,MAAA,CAAO,IAAI,WAAa,EAAA;AAAA,QACpB,EAAI,EAAA,WAAA;AAAA,QACJ,IAAM,EAAA,gBAAA;AAAA,QACN,SAAA,EAAW,KAAK,GAAI,EAAA;AAAA,QACpB,gBAAkB,EAAA,OAAA;AAAA,QAClB,iBAAmB,EAAA,QAAA;AAAA,QACnB,KAAO,EAAA,WAAA;AAAA,QACP,SAAW,EAAA,IAAA;AAAA,QACX,QAAU,EAAA,IAAA;AAAA,QACV,SAAA;AAAA,QACA,aAAA;AAAA,QACA,kBAAoB,EAAA,GAAA;AAAA,QACpB,oBAAsB,EAAA,GAAA;AAAA,OACzB,CAAA,CAAA;AAED,MAAA,MAAM,WAAc,GAAA,kBAAA,CAAA;AACpB,MAAA,MAAA,CAAO,IAAI,WAAa,EAAA;AAAA,QACpB,EAAI,EAAA,WAAA;AAAA,QACJ,SAAA,EAAW,KAAK,GAAI,EAAA;AAAA,QACpB,IAAM,EAAA,WAAA;AAAA,QACN,SAAA;AAAA,QACA,aAAA;AAAA,QACA,SAAW,EAAA,WAAA;AAAA,QACX,uBAAyB,EAAA,WAAA;AAAA,QACzB,4BAA8B,EAAA,CAAA;AAAA,OACjC,CAAA,CAAA;AAGD,MAAA,MAAA,CAAO,IAAI,GAAK,EAAA;AAAA,QACZ,EAAI,EAAA,GAAA;AAAA,QACJ,IAAM,EAAA,iBAAA;AAAA,QACN,SAAA,EAAW,KAAK,GAAI,EAAA;AAAA,QACpB,kBAAA,EAAoB,mBAAK,aAAc,CAAA,CAAA,IAAA;AAAA,QACvC,oBAAoB,YAAK,CAAA,IAAA,EAAA,mBAAA,CAAA;AAAA,OAC5B,CAAA,CAAA;AAED,MAAA,OAAO,QAAQ,MAAM,CAAA,CAAA;AAAA,KACxB,CAAA,CAAA;AAAA,GACL;AAAA,EAEA,eAAkD,GAAA;AAC9C,IAAA,OAAO,EAAC,CAAA;AAAA,GACZ;AAAA,EAEA,WAAoB,GAAA;AAChB,IAAM,MAAA,IAAI,aAAa,iBAAiB,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEA,UAA4B,GAAA;AACxB,IAAM,MAAA,IAAI,aAAa,iBAAiB,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEA,MAAM,oBAAoB,WAAkE,EAAA;AACxF,IAAI,IAAA,WAAA,EAAa,SAAS,OAAS,EAAA;AAE/B,MAAA,OAAA;AAAA,KACJ;AAEA,IAAK,YAAA,CAAA,IAAA,EAAA,eAAA,CAAA,CAAgB,mBAAoB,CAAA,WAAA,EAAa,IAAW,CAAA,CAAA;AAAA,GACrE;AAAA,EAEA,MAAM,qBAAqB,WAAkE,EAAA;AACzF,IAAI,IAAA,WAAA,CAAY,OAAO,IAAM,EAAA;AACzB,MAAM,MAAA,IAAI,aAAa,wBAAwB,CAAA,CAAA;AAAA,KACnD;AAEA,IAAA,YAAA,CAAA,IAAA,EAAK,eAAgB,CAAA,CAAA,oBAAA,CAAqB,WAAY,CAAA,GAAA,EAAK,YAAY,IAAW,CAAA,CAAA;AAAA,GACtF;AACJ,CAAA;AA/cI,eAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AACA,WAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AACA,YAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AACA,aAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AACA,mBAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AACA,OAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AACA,wBAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AACA,KAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AAEA,gBAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AACA,iBAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AAucJ,SAAS,qBAA6B,GAAA;AAClC,EAAA,IAAI,OAAc,EAAA,MAAA,CAAA;AAElB,EAAA,MAAM,OAAU,GAAA,IAAI,OAAQ,CAAA,SAAU,UAAU,OAAS,EAAA;AACrD,IAAU,OAAA,GAAA,QAAA,CAAA;AACV,IAAS,MAAA,GAAA,OAAA,CAAA;AAAA,GACZ,CAAA,CAAA;AAED,EAAC,QAAgB,OAAU,GAAA,OAAA,CAAA;AAC3B,EAAC,QAAgB,MAAS,GAAA,MAAA,CAAA;AAC1B,EAAO,OAAA,OAAA,CAAA;AACX,CAAA;AAEA,SAAS,gBAAgB,MAAgB,EAAA;AACrC,EAAO,OAAA,IAAA,CAAK,QACP,CAAA,QAAA,CAAS,EAAE,CACX,CAAA,SAAA,CAAU,CAAG,EAAA,CAAA,GAAI,MAAM,CAAA,CAAA;AAChC;;;;"}